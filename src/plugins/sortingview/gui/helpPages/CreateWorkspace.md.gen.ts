const text: string = "# Creating a new sortingview workspace\n\nTo create a new workspace with a single recording/sorting pair, run the following Python script on the computer where the backend service is running. This will print a URL that you can open in your browser.\n\n```python\nimport numpy as np\nimport sortingview as sv\nimport spikeextractors as se\n\n# replace \"new-workspace\" with the label of the new workspace\nnew_workspace_label = # 'new-workspace'\n\nworkspace = sv.create_workspace(label=new_workspace_label)\nchannel = '{channel}'\nbase_url = '{baseUrl}'\n\n# simulate a recording/sorting pair\nduration_sec = 50 # duration of simulated recording\nnum_channels = 8 # num. channels in simulated recording\nnum_units = 5 # num units\nseed = 2 # random number generator seed\n\ndef prepare_recording_sorting():\n    # Simulate a recording (toy example)\n    recording, sorting = se.example_datasets.toy_example(duration=duration_sec, num_channels=num_channels, K=num_units, seed=seed)\n    R = sv.LabboxEphysRecordingExtractor.from_memory(recording, serialize=True, serialize_dtype=np.int16)\n    S = sv.LabboxEphysSortingExtractor.from_memory(sorting, serialize=True)\n    return R, S\n\nrecording, sorting_true = prepare_recording_sorting()\nrecording_label = 'simulation'\nsorting_label = 'true'\nprint(f'Workspace URI: {workspace.uri}')\nR_id = workspace.add_recording(recording=recording, label=recording_label)\nS_id = workspace.add_sorting(sorting=sorting_true, recording_id=R_id, label=sorting_label)\n\nprint(workspace.figurl(channel=channel, base_url=base_url))\n```"

export default text