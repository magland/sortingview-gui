const text: string = "import spikeextractors as se\nimport numpy as np\nfrom sortingview.extractors import LabboxEphysRecordingExtractor, LabboxEphysSortingExtractor\nfrom sortingview.workspace import load_workspace\n\n# adjust these values\nworkspace_uri = '{workspaceUri}'\nrecording_label = 'simulated_recording'\nduration_sec = 50 # duration of simulated recording\nnum_channels = 8 # num. channels in simulated recording\nnum_units = 5 # num units\nseed = 1 # random number generator seed\n\ndef prepare_recording_sorting():\n    # Simulate a recording (toy example)\n    recording, sorting = se.example_datasets.toy_example(duration=duration_sec, num_channels=num_channels, K=num_units, seed=seed)\n    R = LabboxEphysRecordingExtractor.from_memory(recording, serialize=True, serialize_dtype=np.int16)\n    S = LabboxEphysSortingExtractor.from_memory(sorting, serialize=True)\n    return R, S\n\nrecording, sorting_true = prepare_recording_sorting()\nsorting_label = 'true'\nworkspace = load_workspace(workspace_uri)\nprint(f'Workspace URI: {workspace.uri}')\nR_id = workspace.add_recording(recording=recording, label=recording_label)\nS_id = workspace.add_sorting(sorting=sorting_true, recording_id=R_id, label=sorting_label)"

export default text